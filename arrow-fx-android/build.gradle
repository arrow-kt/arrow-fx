buildscript {
    repositories {
        google()
    }
    dependencies {
        classpath("com.android.tools.build:gradle:4.0.0")
    }
}

plugins {
    id "maven-publish"
    id "base"
    id "net.rdrei.android.buildtimetracker"
    id "org.jetbrains.dokka"
    id "org.jlleitschuh.gradle.ktlint"
    id "ru.vyarus.animalsniffer"
}

repositories {
    google()
    jcenter()
}

apply from: "$DOC_CONF"

apply plugin: 'com.android.application'

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 21
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }

    sourceSets["main"].java.srcDir("src/main/kotlin")
    sourceSets["test"].java.srcDir("src/test/kotlin")
}

dependencies {
    def ANDROID_LIFECYCLE_VERSION = "2.2.0"
    implementation project(':arrow-fx')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$KOTLIN_VERSION"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$ANDROID_LIFECYCLE_VERSION"

    testImplementation project(":arrow-fx-test")
}

//TODO move the config below to a common splace
apply plugin: 'maven'
apply plugin: 'signing'

version = VERSION_NAME
group = GROUP

def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

def findProperty(String key) {
    [project.properties[key], System.getenv(key)].find { it != null }
}

def getReleaseRepositoryUrl() {
    return findProperty('RELEASE_REPOSITORY_URL') ?: "https://api.bintray.com/maven/arrow-kt/arrow-kt/arrow"
}

def getSnapshotRepositoryUrl() {
    return findProperty('SNAPSHOT_REPOSITORY_URL') ?: "https://oss.jfrog.org/artifactory/oss-snapshot-local"
}

def getRepositoryUsername() {
    return findProperty('BINTRAY_USER') ?: "no.bintray.user"
}

def getRepositoryPassword() {
    return findProperty('BINTRAY_API_KEY') ?: "no.bintray.api.key"
}

afterEvaluate { project ->
    uploadArchives {
        repositories.mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            pom.groupId = GROUP
            pom.artifactId = POM_ARTIFACT_ID
            pom.version = VERSION_NAME

            repository(url: getReleaseRepositoryUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }
            snapshotRepository(url: getSnapshotRepositoryUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            pom.project {
                name POM_NAME
                packaging POM_PACKAGING
                description POM_DESCRIPTION
                url POM_URL

                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }

                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }

                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        excludes = ['**/*.kt']
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}